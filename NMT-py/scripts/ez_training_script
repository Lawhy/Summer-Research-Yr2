#!/usr/bin/env bash
set -e

<<'COMMENT'
This script enables easy running of preprocess-to-train-to-translate process

It takse the following arguments: {lan, ann, t_steps, l_rate} where
$lan is the language you want to train on {ar jp he ch}
$ann is the annotation class you choose {bs -+ +- ++}
$t_steps is the training steps you want to set, for en2ch 12500-13500 is enough.
$l_rate is the intial learning rate

The default working directory is: $main_dir/models
So each time when you have a new setting to train on, you should archive the old one (by changing its name)

An example of the whole process is:
Main directory: $main_dir/models
Suppose lan=ch, ann=+-, t_steps=12500
Script creates needed sub-directories
Woring sub-directory $main_dir/models/ch/m+-
In m+-, there are {2 5 10 15}, four sub-directories
In each of them, there are {data infer}, two sub-directories
Script copies correspongding data from $main_dir/data to the {data}
Script runs preprocess.py train.py and translate.py of OpenNMT-py, the translation results of development set are saved in {infer}
Script copies the inference scripts from the Scripts directory to {infer}.
Please run err in python3 environment and record the results.
The generated wer.txt and cer-clean.txt can tell the results 


(A note of backlash usage)
The line-continuation will fail if you have whitespace (spaces or tab characters) after the backslash and before the newline 
Some detail promoted from the comments: 
the line-continuation backslash in the shell is not a special case; it is simply an example of the general rule that a backslash makes the next character literal, preventing any special effects it might have. 
In this case, the next character is a newline, and the special effect being prevented is terminating the command line. As with all other backslash escapes, there can't be anything between the backslash and the character it's quoting. 
If the next character after the backslash is a space or a tab, you just get a literal space or a tab, and there's no effect on the subsequent newline, which still terminates the command as usual
(A note of backlash usage)

COMMENT

main_dir=/disk/ocean/lhe/transliteration/nmt-py # Change this to your working directory
                                                # OpenNMT and data must be included in this directory
# 1st argument: language
lan=$1
echo "choose $lan from {ar ch he jp}"
cd $main_dir/data/$lan/
cat direction.txt
shift

# 2nd argument model
ann=$1
echo "Choose $ann from {bs -+ +- ++}"
shift

# 3rd argument training steps
t_steps=$1
echo "Training steps: $t_steps"
shift

# 4th argument learning rate
l_rate=$1
echo "Initial learning rate: $l_rate"
shift

# The rest of arguments are clusters
clusters=()
for c in "$@"
do
clusters+=("$c")
done 
echo "Clusters are: ${clusters[*]}"


# make a new main working directory after each setting is archived
mkdir -p $main_dir/models
mkdir -p $main_dir/models/$lan
mkdir -p $main_dir/models/logs
mkdir -p $main_dir/models/logs/$lan


# Assign source and target languages
src="en"
tgt=$lan

if [ $lan = "ar" ]
then
 src=$lan
 tgt="en"
fi

tra="_tra"
dev="_dev"


if [ $ann = "bs" ]
then
 cd $main_dir/data/$lan/
 # Create necessary directories
 mkdir -p $main_dir/models/$lan/$ann
 mkdir -p $main_dir/models/$lan/$ann/data
 mkdir -p $main_dir/models/$lan/$ann/infer
 cp -r bs/* $main_dir/models/$lan/$ann/data/

 # Go to the model directory
 cd $main_dir/models/$lan/$ann

 # ---Preprocess---
 python $main_dir/OpenNMT-py/preprocess.py \
 -train_src data/*$src$tra* -train_tgt data/*$tgt$tra* \
 -valid_src data/*$src$dev* -valid_tgt data/*$tgt$dev* \
 -save_data data/bs
 # ---Training---
 python $main_dir/OpenNMT-py/train.py \
 -data data/bs \
 -save_model bs \
 -train_steps $t_steps \
 -seed 7 \
 -start_decay_step 8000 \
 -save_checkpoint_steps 100\
 -keep_checkpoint 10 \
 -decay_steps 1000 \
 -gpuid 1 \
 -learning_rate $l_rate \
 -log_file $main_dir/models/logs/$lan/bs.log
 # ---Infer---
 let start=t_steps-900
 for ((j = $start; j <= $t_steps; j+=100))
 do
  python $main_dir/OpenNMT-py/translate.py \
  -model bs_step_$j.pt \
  -src data/*$src$dev* \
  -output infer/bs_dev_$j.txt \
  -replace_unk \
  -verbose \
  -gpu 1
 done
 echo "Finish!"
 cp -r /disk/ocean/lhe/transliteration/nmt-py/scripts/infer_scripts/* infer
fi

if [ $ann != "bs" ]
then
 mkdir -p $main_dir/models/$lan/"m$ann"
 # Create necessary directories
 for i in ${clusters[*]}
 do
   echo "The current cluster is: $i"
   cd $main_dir/data/$lan/
   mkdir -p $main_dir/models/$lan/"m$ann"/$i
   mkdir -p $main_dir/models/$lan/"m$ann"/$i/data
   mkdir -p $main_dir/models/$lan/"m$ann"/$i/infer
   # To the {2 5 10 15} cls and copy to the corresponding model dir
   dp=$i
   dp+="cls"

   # Copy data files according to the annotations (-+ +- ++)
   if [ $ann = "-+" ]
   then
   	cp -r ./bs/*$src* $main_dir/models/$lan/"m$ann"/$i/data/  # the - part
        cp -r ./$dp/*$tgt* $main_dir/models/$lan/"m$ann"/$i/data/ # the + part
   fi
   if [ $ann = "+-" ]
   then
	cp -r ./$dp/*$src* $main_dir/models/$lan/"m$ann"/$i/data/ # the + part
        cp -r ./bs/*$tgt* $main_dir/models/$lan/"m$ann"/$i/data/  # the - part
   fi

   if [ $ann = "++" ]
   then
   	cp -r ./$dp/* $main_dir/models/$lan/"m$ann"/$i/data/ # everything +
   fi

   # Go to the model directory
   cd $main_dir/models/$lan/"m$ann"/$i
   # --- Preprocess ---
   python $main_dir/OpenNMT-py/preprocess.py \
   -train_src data/*$src$tra* -train_tgt data/*$tgt$tra* \
   -valid_src data/*$src$dev* -valid_tgt data/*$tgt$dev* \
   -save_data data/$i 
   # --- Training ---
   python $main_dir/OpenNMT-py/train.py \
   -data data/$i \
   -save_model $i \
   -train_steps $t_steps \
   -seed 7 \
   -start_decay_step 8000 \
   -save_checkpoint_steps 100 \
   -keep_checkpoint 10 \
   -decay_steps 1000 \
   -learning_rate $l_rate \
   -gpuid 2 \
   -log_file $main_dir/models/logs/$lan/$i$ann.log 
   # --- Infer ---
   let start=$t_steps-900
   development="_dev_"
   step="_step_"
   infer="_infer"
   for ((j = $start; j <= $t_steps; j+=100)); 
   do
     python $main_dir/OpenNMT-py/translate.py \
     -model $i$step$j.pt \
     -src data/*$src$dev* \
     -output infer/$i$development$j.txt \
     -replace_unk \
     -verbose \
     -gpu 1;
   done
   # Copy the infer scripts to the infer directory
   cp -r /disk/ocean/lhe/transliteration/nmt-py/scripts/infer_scripts/* infer
   echo "Finish!"
 done
fi

echo "Create best_results"
mkdir -p $main_dir/best_results
mkdir -p $main_dir/best_results/$lan



